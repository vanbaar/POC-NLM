'use strict';

describe('protractor-uisref-locator', function () {
  var _beforeAll = false;
  beforeEach(function () {
    if (_beforeAll) return;
    else {
      browser.get('http://localhost:3000');

      _beforeAll = true;
    }
  });

  describe('by.uiSref', function () {
    it('by.uiSref locator is defined', function () {
      expect(by.uiSref).toBeDefined();
    });

    it('finds an element by ui-sref', function () {
      expect(element(by.uiSref('users.index')).isPresent()).toEqual(true);
      expect(element(by.uiSref('widgets.index')).isPresent()).toEqual(true);
    });

    it('finds many elements by ui-sref', function () {
      element.all(by.uiSref('users.index')).then(function (elems) {
        expect(elems.length).toEqual(2);
      });
    });

    describe('optional parent element', function () {

      it('returns all elements when parent not set', function () {
        var locator = by.uiSref('parent.index');
        expect(element.all(locator).count()).toBe(5);
      });

      it('returns all child elements when parent is set', function () {
        var parent = element(by.css('#parent'));
        expect(parent.all(by.uiSref('parent.index')).count()).toBe(3);
      });

      it('returns all child elements for deep nesting', function () {
        var parent1 = element(by.css('#parent'));
        var parent2 = parent1.element(by.css('level-three'));
        expect(parent2.all(by.uiSref('parent.index')).count()).toBe(1);
      });

      it('returns children of ui-sref element', function () {
        var parent = element(by.css('level-three'));
        var uiEl = parent.element(by.uiSref('parent.index'));
        expect(uiEl.element(by.css('span')).getText()).toBe('some child');
      });

    });

  });
});
